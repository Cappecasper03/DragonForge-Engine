#pragma once

#include <unordered_map>

namespace df::input
{
	enum eKey
	{
		kUnknown            = 0x00000000u,
		kReturn             = 0x0000000du,
		kEscape             = 0x0000001bu,
		kBackspace          = 0x00000008u,
		kTab                = 0x00000009u,
		kSpace              = 0x00000020u,
		kExclaim            = 0x00000021u,
		kDblapostrophe      = 0x00000022u,
		kHash               = 0x00000023u,
		kDollar             = 0x00000024u,
		kPercent            = 0x00000025u,
		kAmpersand          = 0x00000026u,
		kApostrophe         = 0x00000027u,
		kLeftparen          = 0x00000028u,
		kRightparen         = 0x00000029u,
		kAsterisk           = 0x0000002au,
		kPlus               = 0x0000002bu,
		kComma              = 0x0000002cu,
		kMinus              = 0x0000002du,
		kPeriod             = 0x0000002eu,
		kSlash              = 0x0000002fu,
		k0                  = 0x00000030u,
		k1                  = 0x00000031u,
		k2                  = 0x00000032u,
		k3                  = 0x00000033u,
		k4                  = 0x00000034u,
		k5                  = 0x00000035u,
		k6                  = 0x00000036u,
		k7                  = 0x00000037u,
		k8                  = 0x00000038u,
		k9                  = 0x00000039u,
		kColon              = 0x0000003au,
		kSemicolon          = 0x0000003bu,
		kLess               = 0x0000003cu,
		kEquals             = 0x0000003du,
		kGreater            = 0x0000003eu,
		kQuestion           = 0x0000003fu,
		kAt                 = 0x00000040u,
		kLeftbracket        = 0x0000005bu,
		kBackslash          = 0x0000005cu,
		kRightbracket       = 0x0000005du,
		kCaret              = 0x0000005eu,
		kUnderscore         = 0x0000005fu,
		kGrave              = 0x00000060u,
		kA                  = 0x00000061u,
		kB                  = 0x00000062u,
		kC                  = 0x00000063u,
		kD                  = 0x00000064u,
		kE                  = 0x00000065u,
		kF                  = 0x00000066u,
		kG                  = 0x00000067u,
		kH                  = 0x00000068u,
		kI                  = 0x00000069u,
		kJ                  = 0x0000006au,
		kK                  = 0x0000006bu,
		kL                  = 0x0000006cu,
		kM                  = 0x0000006du,
		kN                  = 0x0000006eu,
		kO                  = 0x0000006fu,
		kP                  = 0x00000070u,
		kQ                  = 0x00000071u,
		kR                  = 0x00000072u,
		kS                  = 0x00000073u,
		kT                  = 0x00000074u,
		kU                  = 0x00000075u,
		kV                  = 0x00000076u,
		kW                  = 0x00000077u,
		kX                  = 0x00000078u,
		kY                  = 0x00000079u,
		kZ                  = 0x0000007au,
		kLeftbrace          = 0x0000007bu,
		kPipe               = 0x0000007cu,
		kRightbrace         = 0x0000007du,
		kTilde              = 0x0000007eu,
		kDelete             = 0x0000007fu,
		kPlusminus          = 0x000000b1u,
		kCapslock           = 0x40000039u,
		kF1                 = 0x4000003au,
		kF2                 = 0x4000003bu,
		kF3                 = 0x4000003cu,
		kF4                 = 0x4000003du,
		kF5                 = 0x4000003eu,
		kF6                 = 0x4000003fu,
		kF7                 = 0x40000040u,
		kF8                 = 0x40000041u,
		kF9                 = 0x40000042u,
		kF10                = 0x40000043u,
		kF11                = 0x40000044u,
		kF12                = 0x40000045u,
		kPrintscreen        = 0x40000046u,
		kScrolllock         = 0x40000047u,
		kPause              = 0x40000048u,
		kInsert             = 0x40000049u,
		kHome               = 0x4000004au,
		kPageup             = 0x4000004bu,
		kEnd                = 0x4000004du,
		kPagedown           = 0x4000004eu,
		kRight              = 0x4000004fu,
		kLeft               = 0x40000050u,
		kDown               = 0x40000051u,
		kUp                 = 0x40000052u,
		kNumlockclear       = 0x40000053u,
		kKpDivide           = 0x40000054u,
		kKpMultiply         = 0x40000055u,
		kKpMinus            = 0x40000056u,
		kKpPlus             = 0x40000057u,
		kKpEnter            = 0x40000058u,
		kKp1                = 0x40000059u,
		kKp2                = 0x4000005au,
		kKp3                = 0x4000005bu,
		kKp4                = 0x4000005cu,
		kKp5                = 0x4000005du,
		kKp6                = 0x4000005eu,
		kKp7                = 0x4000005fu,
		kKp8                = 0x40000060u,
		kKp9                = 0x40000061u,
		kKp0                = 0x40000062u,
		kKpPeriod           = 0x40000063u,
		kApplication        = 0x40000065u,
		kPower              = 0x40000066u,
		kKpEquals           = 0x40000067u,
		kF13                = 0x40000068u,
		kF14                = 0x40000069u,
		kF15                = 0x4000006au,
		kF16                = 0x4000006bu,
		kF17                = 0x4000006cu,
		kF18                = 0x4000006du,
		kF19                = 0x4000006eu,
		kF20                = 0x4000006fu,
		kF21                = 0x40000070u,
		kF22                = 0x40000071u,
		kF23                = 0x40000072u,
		kF24                = 0x40000073u,
		kExecute            = 0x40000074u,
		kHelp               = 0x40000075u,
		kMenu               = 0x40000076u,
		kSelect             = 0x40000077u,
		kStop               = 0x40000078u,
		kAgain              = 0x40000079u,
		kUndo               = 0x4000007au,
		kCut                = 0x4000007bu,
		kCopy               = 0x4000007cu,
		kPaste              = 0x4000007du,
		kFind               = 0x4000007eu,
		kMute               = 0x4000007fu,
		kVolumeup           = 0x40000080u,
		kVolumedown         = 0x40000081u,
		kKpComma            = 0x40000085u,
		kKpEqualsas400      = 0x40000086u,
		kAlterase           = 0x40000099u,
		kSysreq             = 0x4000009au,
		kCancel             = 0x4000009bu,
		kClear              = 0x4000009cu,
		kPrior              = 0x4000009du,
		kReturn2            = 0x4000009eu,
		kSeparator          = 0x4000009fu,
		kOut                = 0x400000a0u,
		kOper               = 0x400000a1u,
		kClearagain         = 0x400000a2u,
		kCrsel              = 0x400000a3u,
		kExsel              = 0x400000a4u,
		kKp00               = 0x400000b0u,
		kKp000              = 0x400000b1u,
		kThousandsseparator = 0x400000b2u,
		kDecimalseparator   = 0x400000b3u,
		kCurrencyunit       = 0x400000b4u,
		kCurrencysubunit    = 0x400000b5u,
		kKpLeftparen        = 0x400000b6u,
		kKpRightparen       = 0x400000b7u,
		kKpLeftbrace        = 0x400000b8u,
		kKpRightbrace       = 0x400000b9u,
		kKpTab              = 0x400000bau,
		kKpBackspace        = 0x400000bbu,
		kKpA                = 0x400000bcu,
		kKpB                = 0x400000bdu,
		kKpC                = 0x400000beu,
		kKpD                = 0x400000bfu,
		kKpE                = 0x400000c0u,
		kKpF                = 0x400000c1u,
		kKpXor              = 0x400000c2u,
		kKpPower            = 0x400000c3u,
		kKpPercent          = 0x400000c4u,
		kKpLess             = 0x400000c5u,
		kKpGreater          = 0x400000c6u,
		kKpAmpersand        = 0x400000c7u,
		kKpDblampersand     = 0x400000c8u,
		kKpVerticalbar      = 0x400000c9u,
		kKpDblverticalbar   = 0x400000cau,
		kKpColon            = 0x400000cbu,
		kKpHash             = 0x400000ccu,
		kKpSpace            = 0x400000cdu,
		kKpAt               = 0x400000ceu,
		kKpExclam           = 0x400000cfu,
		kKpMemstore         = 0x400000d0u,
		kKpMemrecall        = 0x400000d1u,
		kKpMemclear         = 0x400000d2u,
		kKpMemadd           = 0x400000d3u,
		kKpMemsubtract      = 0x400000d4u,
		kKpMemmultiply      = 0x400000d5u,
		kKpMemdivide        = 0x400000d6u,
		kKpPlusminus        = 0x400000d7u,
		kKpClear            = 0x400000d8u,
		kKpClearentry       = 0x400000d9u,
		kKpBinary           = 0x400000dau,
		kKpOctal            = 0x400000dbu,
		kKpDecimal          = 0x400000dcu,
		kKpHexadecimal      = 0x400000ddu,
		kLctrl              = 0x400000e0u,
		kLshift             = 0x400000e1u,
		kLalt               = 0x400000e2u,
		kLgui               = 0x400000e3u,
		kRctrl              = 0x400000e4u,
		kRshift             = 0x400000e5u,
		kRalt               = 0x400000e6u,
		kRgui               = 0x400000e7u,
		kMode               = 0x40000101u,
		kSleep              = 0x40000102u,
		kWake               = 0x40000103u,
		kChannelIncrement   = 0x40000104u,
		kChannelDecrement   = 0x40000105u,
		kMediaPlay          = 0x40000106u,
		kMediaPause         = 0x40000107u,
		kMediaRecord        = 0x40000108u,
		kMediaFastForward   = 0x40000109u,
		kMediaRewind        = 0x4000010au,
		kMediaNextTrack     = 0x4000010bu,
		kMediaPreviousTrack = 0x4000010cu,
		kMediaStop          = 0x4000010du,
		kMediaEject         = 0x4000010eu,
		kMediaPlayPause     = 0x4000010fu,
		kMediaSelect        = 0x40000110u,
		kAcNew              = 0x40000111u,
		kAcOpen             = 0x40000112u,
		kAcClose            = 0x40000113u,
		kAcExit             = 0x40000114u,
		kAcSave             = 0x40000115u,
		kAcPrint            = 0x40000116u,
		kAcProperties       = 0x40000117u,
		kAcSearch           = 0x40000118u,
		kAcHome             = 0x40000119u,
		kAcBack             = 0x4000011au,
		kAcForward          = 0x4000011bu,
		kAcStop             = 0x4000011cu,
		kAcRefresh          = 0x4000011du,
		kAcBookmarks        = 0x4000011eu,
		kSoftleft           = 0x4000011fu,
		kSoftright          = 0x40000120u,
		kCall               = 0x40000121u,
		kEndcall            = 0x40000122u,
		kLeftTab            = 0x20000001u,
		kLevel5Shift        = 0x20000002u,
		kMultiKeyCompose    = 0x20000003u,
		kLmeta              = 0x20000004u,
		kRmeta              = 0x20000005u,
		kLhyper             = 0x20000006u,
		kRhyper             = 0x20000007u,
	};

	enum eButton
	{
		kButtonLeft   = 1,
		kButtonMiddle = 2,
		kButtonRight  = 3,
		kButtonX1     = 4,
		kButtonX2     = 5,
	};

	enum eAction
	{
		kPress   = 1,
		kRelease = -1,
		kRepeat  = 2,
		kNone    = 0,
	};

	enum class eKeyModifier
	{
		kNone   = 0x0000u,
		kLshift = 0x0001u,
		kRshift = 0x0002u,
		kLevel5 = 0x0004u,
		kLctrl  = 0x0040u,
		kRctrl  = 0x0080u,
		kLalt   = 0x0100u,
		kRalt   = 0x0200u,
		kLgui   = 0x0400u,
		kRgui   = 0x0800u,
		kNum    = 0x1000u,
		kCaps   = 0x2000u,
		kMode   = 0x4000u,
		kScroll = 0x8000u,
		kCtrl   = kLctrl | kRctrl,
		kShift  = kLshift | kRshift,
		kAlt    = kLalt | kRalt,
		kGui    = kLgui | kRgui,
	};

	struct sKeyboard
	{
		unsigned key       = 0;
		int      action    = -1;
		int      modifiers = -1;
	};

	struct sMouseButton
	{
		int action = -1;
		int clicks = -1;
	};

	struct sMouseCursor
	{
		double x_delta = 0;
		double y_delta = 0;

		double x_previous = -1;
		double y_previous = -1;

		double x_current = -1;
		double y_current = -1;
	};

	struct sMouseScroll
	{
		double x_delta = 0;
		double y_delta = 0;
	};

	struct sInput
	{
		std::unordered_map< unsigned, sKeyboard > keyboard;
		std::unordered_map< int, sMouseButton >   mouse_button;
		sMouseCursor                              mouse_cursor = {};
		sMouseScroll                              mouse_scroll = {};
	};
}
